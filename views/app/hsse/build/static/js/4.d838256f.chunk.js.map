{"version":3,"sources":["js/useEventListener.js","js/Lightbox.js"],"names":["useEventListener","eventName","handler","element","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","Lightbox","props","e","visible","key","loadPrevious","loadNext","document","results","length","id","className","onClick","target","classList","contains","hideLightbox","disabled","href","url","rel","type","src","content","alt","Sidebar","title","tags","map","tag","i"],"mappings":"kLA0CeA,MAlCf,SAA0BC,EAAWC,GAA4B,IAAnBC,EAAkB,uDAARC,OAE9CC,EAAeC,mBAMrBC,qBAAU,WACNF,EAAaG,QAAUN,IACxB,CAACA,IAEJK,qBACI,WAII,GADoBJ,GAAWA,EAAQM,iBACvC,CAGA,IAAMC,EAAgB,SAACC,GAAD,OAAWN,EAAaG,QAAQG,IAMtD,OAHAR,EAAQM,iBAAiBR,EAAWS,GAG7B,WACHP,EAAQS,oBAAoBX,EAAWS,OAG/C,CAACT,EAAWE,K,eCsDLU,UAjFE,SAACC,GAgBd,OAdAd,EACI,SACA,SAACe,GACOD,EAAME,UACQ,cAAVD,EAAEE,IACFH,EAAMI,eACW,eAAVH,EAAEE,KACTH,EAAMK,cAIlBC,UAGGN,EAAMO,QAAQC,OAASR,EAAMS,GAChC,yBACIC,UAAS,kBAAaV,EAAME,QAAU,WAAa,IACnDS,QAAS,SAACV,GACFA,EAAEW,OAAOC,UAAUC,SAAS,aAC5Bd,EAAMe,iBAId,4BACIL,UAAS,mCACTM,SAAUhB,EAAMS,IAAM,EACtBE,QAAS,WACLX,EAAMI,iBAGV,kBAAC,IAAD,OAGJ,uBACIa,KAAMjB,EAAMO,QAAQP,EAAMS,IAAIS,IAC9BN,OAAO,SACPO,IAAI,uBAE8B,IAAjCnB,EAAMO,QAAQP,EAAMS,IAAIW,KACrB,yBACIC,IAAKrB,EAAMO,QAAQP,EAAMS,IAAIa,QAC7BC,IAAI,mBAER,KAC8B,IAAjCvB,EAAMO,QAAQP,EAAMS,IAAIW,KACrB,6BACI,qDAEJ,MAGR,4BACIV,UAAU,oCACVM,SAAUhB,EAAMS,IAAMT,EAAMO,QAAQC,OAAS,EAC7CG,QAAS,WACLX,EAAMK,aAGV,kBAAC,IAAD,OAGJ,4BACIK,UAAU,oCACVC,QAASX,EAAMe,cAEf,kBAAC,IAAD,OAGJ,kBAACS,EAAA,EAAD,CAASC,MAAM,cACX,wBAAIf,UAAU,gBACTV,EAAMO,QAAQP,EAAMS,IAAIiB,KAAKC,KAAI,SAACC,EAAKC,GACpC,OAAO,wBAAI1B,IAAK0B,GAAID,SAKpC","file":"static/js/4.d838256f.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\n/**\r\n * useEventListener from https://usehooks.com/useEventListener/\r\n * @param {String} eventName The event to listen to\r\n * @param {EventListenerOrEventListenerObject} handler The function to be called when the event occurs\r\n * @param {HTMLElement} element The element which listens to the event\r\n */\r\nfunction useEventListener(eventName, handler, element = window) {\r\n    // Create a ref that stores handler\r\n    const savedHandler = useRef();\r\n\r\n    // Update ref.current value if handler changes.\r\n    // This allows our effect below to always get latest handler ...\r\n    // ... without us needing to pass it in effect deps array ...\r\n    // ... and potentially cause effect to re-run every render.\r\n    useEffect(() => {\r\n        savedHandler.current = handler;\r\n    }, [handler]);\r\n\r\n    useEffect(\r\n        () => {\r\n            // Make sure element supports addEventListener\r\n            // On\r\n            const isSupported = element && element.addEventListener;\r\n            if (!isSupported) return;\r\n\r\n            // Create event listener that calls handler function stored in ref\r\n            const eventListener = (event) => savedHandler.current(event);\r\n\r\n            // Add event listener\r\n            element.addEventListener(eventName, eventListener);\r\n\r\n            // Remove event listener on cleanup\r\n            return () => {\r\n                element.removeEventListener(eventName, eventListener);\r\n            };\r\n        },\r\n        [eventName, element] // Re-run if eventName or element changes\r\n    );\r\n}\r\n\r\nexport default useEventListener;\r\n","import React from \"react\";\r\nimport { MdChevronLeft, MdChevronRight, MdClose } from \"react-icons/md\";\r\n\r\nimport useEventListener from \"./useEventListener\";\r\nimport \"../css/Lightbox.scss\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\n/**\r\n * A lightbox to show search results in\r\n * @param {Object} props\r\n */\r\nconst Lightbox = (props) => {\r\n    // Shortcut listener\r\n    useEventListener(\r\n        \"keyup\",\r\n        (e) => {\r\n            if (props.visible) {\r\n                if (e.key === \"ArrowLeft\") {\r\n                    props.loadPrevious();\r\n                } else if (e.key === \"ArrowRight\") {\r\n                    props.loadNext();\r\n                }\r\n            }\r\n        },\r\n        document\r\n    );\r\n\r\n    return props.results.length > props.id ? (\r\n        <div\r\n            className={`lightbox${props.visible ? \" visible\" : \"\"}`}\r\n            onClick={(e) => {\r\n                if (e.target.classList.contains(\"lightbox\")) {\r\n                    props.hideLightbox();\r\n                }\r\n            }}\r\n        >\r\n            <button\r\n                className={`lightbox-btn-clear lightbox-left`}\r\n                disabled={props.id <= 0 ? true : false}\r\n                onClick={() => {\r\n                    props.loadPrevious();\r\n                }}\r\n            >\r\n                <MdChevronLeft />\r\n            </button>\r\n\r\n            <a\r\n                href={props.results[props.id].url}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                {props.results[props.id].type === 0 ? (\r\n                    <img\r\n                        src={props.results[props.id].content}\r\n                        alt=\"Lightbox Panel\"\r\n                    />\r\n                ) : null}\r\n                {props.results[props.id].type === 1 ? (\r\n                    <div>\r\n                        <p>Flash not functional.</p>\r\n                    </div>\r\n                ) : null}\r\n            </a>\r\n\r\n            <button\r\n                className=\"lightbox-btn-clear lightbox-right\"\r\n                disabled={props.id >= props.results.length - 1 ? true : false}\r\n                onClick={() => {\r\n                    props.loadNext();\r\n                }}\r\n            >\r\n                <MdChevronRight />\r\n            </button>\r\n\r\n            <button\r\n                className=\"lightbox-btn-clear lightbox-close\"\r\n                onClick={props.hideLightbox}\r\n            >\r\n                <MdClose />\r\n            </button>\r\n\r\n            <Sidebar title=\"Asset Tags\">\r\n                <ul className=\"sidebar-text\">\r\n                    {props.results[props.id].tags.map((tag, i) => {\r\n                        return <li key={i}>{tag}</li>;\r\n                    })}\r\n                </ul>\r\n            </Sidebar>\r\n        </div>\r\n    ) : null;\r\n};\r\n\r\nexport default Lightbox;\r\n"],"sourceRoot":""}