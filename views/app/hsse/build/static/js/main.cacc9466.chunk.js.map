{"version":3,"sources":["js/Layout.js","js/Background.js","js/Sidebar.js","serviceWorker.js","js/StaticCanvas.js","js/Home.js","index.js"],"names":["Layout","props","className","children","to","Background","canvasRef","createRef","useLayoutEffect","image","Image","renderImage","current","getContext","clearRect","width","height","window","innerWidth","innerHeight","heightToRatio","drawImage","src","addEventListener","removeEventListener","ref","Sidebar","useState","showSidebar","setShowSidebar","onClick","title","clearSearch","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","StaticCanvas","ev","Lightbox","lazy","ENDPOINT","host","HomePage","results","setResults","tags","setTags","id","visible","lightbox","setLightbox","visibleResults","setVisibleResults","currentPage","setCurrentPage","searchRef","visibleResultsRef","useEffect","fetch","e","json","data","sort","a","b","position","target","classList","contains","scrollTo","top","behavior","pages","Math","ceil","length","firstPage","lastPage","i","push","key","parseInt","innerText","onSubmit","preventDefault","rangeRef","searchTags","value","prevWasSpace","actualTags","tempTag","pageRanges","pageRangePoint","charCode","charCodeAt","String","fromCharCode","trimmed","trimRight","found","j","n","synonyms","includes","method","headers","body","JSON","stringify","ranges","htmlFor","type","autoComplete","placeholder","defaultValue","min","max","onChange","slice","map","result","href","url","rel","thumbnail","content","tag","category","scrollLeft","scrollWidth","addTagToSearch","hideLightbox","loadPrevious","loadNext","Login","Edit","Settings","ReactDOM","render","StrictMode","fallback","path","document","getElementById","URL","process","origin","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cacc9466.chunk.js","sourcesContent":["import { Link } from \"@reach/router\";\r\nimport React from \"react\";\r\n\r\nimport {\r\n    MdEdit,\r\n    MdSearch,\r\n    MdSettings,\r\n    MdSupervisorAccount,\r\n} from \"react-icons/md\";\r\n\r\nimport \"../css/Layout.scss\";\r\n\r\nfunction Layout(props) {\r\n    return (\r\n        <main className={`main ${props.className || \"\"}`}>\r\n            <div className=\"main-middle\">{props.children}</div>\r\n            <div className=\"system\">\r\n                <Link to=\"/\">\r\n                    <MdSearch />\r\n                </Link>\r\n                <Link to=\"/settings\">\r\n                    <MdSettings />\r\n                </Link>\r\n                <Link className=\"edit-link\" to=\"/edit\">\r\n                    <MdEdit />\r\n                </Link>\r\n            </div>\r\n\r\n            <div className=\"user\">\r\n                <MdSupervisorAccount className=\"mod-icon\" />\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n","import React, { createRef, useLayoutEffect } from \"react\";\r\n\r\nimport \"../css/Background.scss\";\r\n\r\nconst Background = (props) => {\r\n    const canvasRef = createRef();\r\n\r\n    useLayoutEffect(() => {\r\n        const image = new Image();\r\n        image.src = props.src;\r\n\r\n        function renderImage() {\r\n            if (canvasRef.current) {\r\n                // Clear canvas\r\n                canvasRef.current\r\n                    .getContext(\"2d\")\r\n                    .clearRect(\r\n                        0,\r\n                        0,\r\n                        canvasRef.current.width,\r\n                        canvasRef.current.height\r\n                    );\r\n\r\n                // Resize canvas\r\n                canvasRef.current.width = window.innerWidth;\r\n                canvasRef.current.height = window.innerHeight;\r\n\r\n                // Draw image at correct scale to cover entire page\r\n                let heightToRatio =\r\n                    (image.height / image.width) * window.innerWidth;\r\n\r\n                if (heightToRatio < window.innerHeight) {\r\n                    canvasRef.current\r\n                        .getContext(\"2d\")\r\n                        .drawImage(\r\n                            image,\r\n                            0,\r\n                            0,\r\n                            (image.width / image.height) * window.innerHeight,\r\n                            window.innerHeight\r\n                        );\r\n                } else {\r\n                    canvasRef.current\r\n                        .getContext(\"2d\")\r\n                        .drawImage(\r\n                            image,\r\n                            0,\r\n                            0,\r\n                            window.innerWidth,\r\n                            heightToRatio\r\n                        );\r\n                }\r\n            }\r\n        }\r\n\r\n        // Rerender background on resize and load\r\n        image.addEventListener(\"load\", renderImage);\r\n        window.addEventListener(\"resize\", renderImage);\r\n\r\n        return () => {\r\n            image.removeEventListener(\"load\", renderImage);\r\n            window.removeEventListener(\"resize\", renderImage);\r\n        };\r\n    }, [canvasRef, props]);\r\n\r\n    return (\r\n        <div className=\"background\">\r\n            <canvas\r\n                width={window.innerWidth}\r\n                height={window.innerHeight}\r\n                ref={canvasRef}\r\n            ></canvas>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Background;\r\n","import React, { useState } from \"react\";\r\nimport { MdChevronLeft, MdDelete } from \"react-icons/md\";\r\n\r\nimport \"../css/Sidebar.scss\";\r\n\r\nconst Sidebar = (props) => {\r\n    const [showSidebar, setShowSidebar] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <aside className={`sidebar${showSidebar ? \" visible\" : \"\"}`}>\r\n                <div\r\n                    className={`sidebar-controls ${\r\n                        showSidebar ? \"close\" : \"open\"\r\n                    }`}\r\n                >\r\n                    <button\r\n                        className={`sidebar-button ${\r\n                            showSidebar ? \"close\" : \"open\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setShowSidebar(!showSidebar);\r\n                        }}\r\n                    >\r\n                        <MdChevronLeft />\r\n                        <h2>{props.title}</h2>\r\n                    </button>\r\n\r\n                    {props.clearSearch ? (\r\n                        <button\r\n                            className=\"sidebar-button\"\r\n                            onClick={props.clearSearch}\r\n                        >\r\n                            <MdDelete />\r\n                        </button>\r\n                    ) : null}\r\n                </div>\r\n\r\n                <div className=\"sidebar-inner\">{props.children}</div>\r\n            </aside>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React, { createRef, useLayoutEffect } from \"react\";\r\n\r\nimport \"../css/StaticCanvas.scss\";\r\n\r\nconst StaticCanvas = (props) => {\r\n    const canvasRef = createRef();\r\n\r\n    useLayoutEffect(() => {\r\n        const image = new Image();\r\n        image.src = props.src;\r\n\r\n        let ev = image.addEventListener(\"load\", () => {\r\n            if (canvasRef.current) {\r\n                canvasRef.current\r\n                    .getContext(\"2d\")\r\n                    .clearRect(0, 0, props.width, props.height);\r\n                canvasRef.current.getContext(\"2d\").drawImage(image, 0, 0);\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            image.removeEventListener(\"load\", ev);\r\n        };\r\n    }, [canvasRef, props]);\r\n\r\n    return (\r\n        <canvas\r\n            width={props.width}\r\n            height={props.height}\r\n            className=\"static-canvas\"\r\n            ref={canvasRef}\r\n        ></canvas>\r\n    );\r\n};\r\n\r\nexport default StaticCanvas;\r\n","import React, { createRef, lazy, useEffect, useState } from \"react\";\r\nimport {\r\n    MdArrowUpward,\r\n    MdChevronLeft,\r\n    MdChevronRight,\r\n    MdFullscreen,\r\n    MdSearch,\r\n} from \"react-icons/md\";\r\n\r\nimport \"../css/Home.scss\";\r\nimport Background from \"./Background\";\r\n\r\nimport Layout from \"./Layout\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport StaticCanvas from \"./StaticCanvas\";\r\nconst Lightbox = lazy(() => import(\"./Lightbox\"));\r\n\r\nlet ENDPOINT =\r\n    window.location.host === \"localhost:3000\"\r\n        ? \"http://localhost:4000\"\r\n        : \"https://ahlgreen.net\";\r\n\r\nfunction HomePage() {\r\n    const [results, setResults] = useState([]);\r\n    const [tags, setTags] = useState([]);\r\n    const [lightbox, setLightbox] = useState({\r\n        results: [],\r\n        id: 0,\r\n        image: \"\",\r\n        visible: false,\r\n    });\r\n    const [visibleResults, setVisibleResults] = useState(20);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    const searchRef = createRef();\r\n    const visibleResultsRef = createRef();\r\n\r\n    useEffect(() => {\r\n        // Get tags\r\n        fetch(`${ENDPOINT}/api/app/1/tags`)\r\n            .then((e) => e.json())\r\n            .then((data) => {\r\n                data.sort((a, b) => {\r\n                    return a.position - b.position;\r\n                });\r\n\r\n                setTags(data);\r\n            });\r\n    }, []);\r\n\r\n    const addTagToSearch = (tag) => {\r\n        for (let i = searchRef.current.value.length - 1; i >= 0; i--) {\r\n            if (searchRef.current.value[i] === \",\") {\r\n                break;\r\n            } else if (searchRef.current.value[i] !== \" \") {\r\n                searchRef.current.value += \",\";\r\n                break;\r\n            }\r\n        }\r\n\r\n        searchRef.current.value += tag;\r\n\r\n        searchRef.current.scrollLeft = searchRef.current.scrollWidth;\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Get tags from search string\r\n        const searchTags = searchRef.current.value;\r\n\r\n        let prevWasSpace = true;\r\n        let actualTags = [];\r\n        let tempTag = \"\";\r\n\r\n        let pageRanges = [];\r\n        let pageRangePoint = 0;\r\n        let rangeRef;\r\n\r\n        for (let i = 0; i <= searchTags.length; i++) {\r\n            // Separator\r\n            if (searchTags[i] === \",\" || i === searchTags.length) {\r\n                let trimmed = tempTag.trimRight();\r\n                if (trimmed.length > 0) actualTags.push(trimmed);\r\n\r\n                tempTag = \"\";\r\n                prevWasSpace = true;\r\n                continue;\r\n            }\r\n\r\n            // Page range\r\n            if (searchTags[i] === \"(\") {\r\n                pageRangePoint = 1;\r\n                pageRanges.push([\"\", \"\"]);\r\n                rangeRef = pageRanges[pageRanges.length - 1];\r\n                continue;\r\n            } else if (searchTags[i] === \"-\") {\r\n                pageRangePoint = 2;\r\n                continue;\r\n            } else if (searchTags[i] === \")\") {\r\n                pageRangePoint = 0;\r\n                rangeRef = null;\r\n                continue;\r\n            }\r\n\r\n            // Tag reading\r\n            if (searchTags[i] === \" \" && !prevWasSpace) {\r\n                tempTag += \" \";\r\n                prevWasSpace = true;\r\n            } else if (searchTags[i] !== \" \") {\r\n                const charCode = searchTags.charCodeAt(i);\r\n\r\n                if (charCode <= 57 && charCode >= 48) {\r\n                    // Start or end of page range\r\n                    if (rangeRef) {\r\n                        if (pageRangePoint === 1) {\r\n                            rangeRef[0] += searchTags[i];\r\n                        } else if (pageRangePoint === 2) {\r\n                            rangeRef[1] += searchTags[i];\r\n                        }\r\n                    }\r\n                } else if (charCode <= 90 && charCode >= 65) {\r\n                    // Force lowercase\r\n                    tempTag += String.fromCharCode(charCode - 65 + 97);\r\n                } else {\r\n                    tempTag += searchTags[i];\r\n                }\r\n\r\n                prevWasSpace = false;\r\n            }\r\n        }\r\n\r\n        // Convert tags to main tag\r\n        // TODO: Improve speed??\r\n        for (let i = 0; i < actualTags.length; i++) {\r\n            let found = false;\r\n\r\n            for (let j = 0; j < tags.length; j++) {\r\n                for (let n = 0; n < tags[j].tags.length; n++) {\r\n                    if (tags[j].tags[n].synonyms.includes(actualTags[i])) {\r\n                        actualTags[i] = tags[j].tags[n].title;\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (found) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Perform search\r\n        fetch(`${ENDPOINT}/api/app/1/search`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ tags: actualTags, ranges: pageRanges }),\r\n        })\r\n            .then((e) => e.json())\r\n            .then((data) => {\r\n                if (data.error) {\r\n                    console.error(data.error);\r\n                    return;\r\n                }\r\n\r\n                setResults(data);\r\n                setCurrentPage(1);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Layout className=\"home-page\" title=\"Homestuck Search Engine\">\r\n            <Background src=\"https://pipe.miroware.io/5bc7665ecc3313406322aba0/dirk_bg_earthC.png\" />\r\n\r\n            <nav className=\"page-nav\">\r\n                <ul>\r\n                    <li\r\n                        className={currentPage > 1 ? \"enabled\" : \"\"}\r\n                        onClick={(e) => {\r\n                            if (e.target.classList.contains(\"enabled\")) {\r\n                                setCurrentPage(currentPage - 1);\r\n                                window.scrollTo({\r\n                                    top: 0,\r\n                                    behavior: \"smooth\",\r\n                                });\r\n                            }\r\n                        }}\r\n                    >\r\n                        <MdChevronLeft />\r\n                    </li>\r\n\r\n                    <li className=\"pages\">\r\n                        {(() => {\r\n                            const data = [];\r\n\r\n                            if (visibleResults > 0) {\r\n                                let pages = Math.ceil(\r\n                                    results.length / visibleResults\r\n                                );\r\n                                let firstPage = currentPage - 5;\r\n                                if (firstPage < 1) {\r\n                                    firstPage = 1;\r\n                                }\r\n\r\n                                let lastPage = firstPage + 9;\r\n                                if (lastPage > pages) {\r\n                                    lastPage = pages;\r\n                                }\r\n\r\n                                for (let i = firstPage; i <= lastPage; i++) {\r\n                                    data.push(\r\n                                        <button\r\n                                            className={\r\n                                                currentPage === i\r\n                                                    ? \"current\"\r\n                                                    : \"\"\r\n                                            }\r\n                                            key={i}\r\n                                            onClick={(e) => {\r\n                                                setCurrentPage(\r\n                                                    parseInt(e.target.innerText)\r\n                                                );\r\n                                                window.scrollTo({\r\n                                                    top: 0,\r\n                                                    behavior: \"smooth\",\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            {i}\r\n                                        </button>\r\n                                    );\r\n                                }\r\n                            }\r\n\r\n                            return data;\r\n                        })()}\r\n                    </li>\r\n\r\n                    <li\r\n                        className={\r\n                            currentPage <\r\n                            Math.ceil(results.length / visibleResults)\r\n                                ? \"enabled\"\r\n                                : \"\"\r\n                        }\r\n                        onClick={(e) => {\r\n                            if (e.target.classList.contains(\"enabled\")) {\r\n                                setCurrentPage(currentPage + 1);\r\n                                window.scrollTo({\r\n                                    top: 0,\r\n                                    behavior: \"smooth\",\r\n                                });\r\n                            }\r\n                        }}\r\n                    >\r\n                        <MdChevronRight />\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n\r\n            <form className=\"search-form\" onSubmit={handleSubmit}>\r\n                <label className=\"search-term-label\" htmlFor=\"search-term\">\r\n                    <input\r\n                        ref={searchRef}\r\n                        id=\"search-term\"\r\n                        className=\"search-input\"\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        placeholder=\"Search (ex. 'john, act 1, dad')\"\r\n                    />\r\n                    <button className=\"search-button\" type=\"submit\">\r\n                        <MdSearch />\r\n                    </button>\r\n                </label>\r\n            </form>\r\n\r\n            <div className=\"results-info\">\r\n                <p className=\"total-results\">Found {results.length} results</p>\r\n\r\n                <div className=\"results-per-page\">\r\n                    <label>Results per page:</label>\r\n                    <div className=\"results-input-wrapper\">\r\n                        <input\r\n                            className=\"results-input\"\r\n                            ref={visibleResultsRef}\r\n                            type=\"number\"\r\n                            defaultValue={visibleResults}\r\n                            min=\"1\"\r\n                            max=\"100\"\r\n                            onChange={() => {\r\n                                if (visibleResultsRef.current.value < 1) {\r\n                                    visibleResultsRef.current.value = 1;\r\n                                } else if (\r\n                                    visibleResultsRef.current.value > 100\r\n                                ) {\r\n                                    visibleResultsRef.current.value = 100;\r\n                                }\r\n\r\n                                setVisibleResults(\r\n                                    visibleResultsRef.current.value\r\n                                );\r\n\r\n                                setCurrentPage(1);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <section className=\"result-grid\">\r\n                {results.length > 0 ? (\r\n                    results\r\n                        .slice(\r\n                            visibleResults * (currentPage - 1),\r\n                            visibleResults * (currentPage - 1) + visibleResults\r\n                        )\r\n                        .map((result, i) => {\r\n                            return (\r\n                                <section className=\"search-result\" key={i}>\r\n                                    <a\r\n                                        href={result.url}\r\n                                        target=\"_blank\"\r\n                                        rel=\"noopener noreferrer\"\r\n                                    >\r\n                                        {result.type === 0 ? (\r\n                                            <StaticCanvas\r\n                                                width=\"650\"\r\n                                                height=\"450\"\r\n                                                src={\r\n                                                    result.thumbnail ||\r\n                                                    result.content\r\n                                                }\r\n                                            />\r\n                                        ) : null}\r\n                                        {result.type === 1 ? (\r\n                                            <div>\r\n                                                <p>Flash not functional.</p>\r\n                                            </div>\r\n                                        ) : null}\r\n                                    </a>\r\n\r\n                                    <div\r\n                                        className=\"search-result-link\"\r\n                                        onClick={() => {\r\n                                            setLightbox({\r\n                                                id:\r\n                                                    visibleResults *\r\n                                                        (currentPage - 1) +\r\n                                                    i,\r\n                                                visible: true,\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        <MdFullscreen />\r\n                                    </div>\r\n                                </section>\r\n                            );\r\n                        })\r\n                ) : (\r\n                    <p className=\"no-results\">No results</p>\r\n                )}\r\n            </section>\r\n\r\n            <div\r\n                className=\"to-top\"\r\n                onClick={() => {\r\n                    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n                }}\r\n            >\r\n                <MdArrowUpward />\r\n            </div>\r\n\r\n            <Sidebar\r\n                title=\"Tags\"\r\n                clearSearch={() => {\r\n                    searchRef.current.value = \"\";\r\n                }}\r\n            >\r\n                {tags.map((tag, i) => {\r\n                    return (\r\n                        <ul key={i}>\r\n                            <li>\r\n                                {tag.category}\r\n                                <ul className=\"sidebar-text focusable\">\r\n                                    {tag.tags.map((tag, i) => {\r\n                                        return (\r\n                                            <li\r\n                                                key={i}\r\n                                                onClick={() => {\r\n                                                    addTagToSearch(tag.title);\r\n                                                }}\r\n                                            >\r\n                                                {tag.title}\r\n                                            </li>\r\n                                        );\r\n                                    })}\r\n                                </ul>\r\n                            </li>\r\n                        </ul>\r\n                    );\r\n                })}\r\n            </Sidebar>\r\n\r\n            <Lightbox\r\n                hideLightbox={() => {\r\n                    setLightbox({ visible: false });\r\n                }}\r\n                loadPrevious={() => {\r\n                    if (lightbox.id > 0) {\r\n                        setLightbox({\r\n                            id: lightbox.id - 1,\r\n                            visible: true,\r\n                        });\r\n                    }\r\n                }}\r\n                loadNext={() => {\r\n                    if (lightbox.id < results.length - 1) {\r\n                        setLightbox({\r\n                            id: lightbox.id + 1,\r\n                            visible: true,\r\n                        });\r\n                    }\r\n                }}\r\n                results={results}\r\n                {...lightbox}\r\n            />\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { lazy, Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Router } from \"@reach/router\";\r\n\r\nimport \"./index.scss\";\r\n\r\nimport Home from \"./js/Home\";\r\nconst Login = lazy(() => import(\"./js/Login\"));\r\nconst Edit = lazy(() => import(\"./js/Edit\"));\r\nconst Settings = lazy(() => import(\"./js/Settings\"));\r\n\r\nconst ENDPOINT = window.location.host === \"localhost:3000\" ? \"\" : \"/app/hsse\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n            <Router>\r\n                <Home path={`${ENDPOINT}/`} />\r\n                <Login path={`${ENDPOINT}/login`} />\r\n                <Edit path={`${ENDPOINT}/edit`} />\r\n                <Settings path={`${ENDPOINT}/settings`} />\r\n            </Router>\r\n        </Suspense>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}